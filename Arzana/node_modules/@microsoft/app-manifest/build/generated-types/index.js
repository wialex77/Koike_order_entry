"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppManifestUtils = exports.ApiPluginManifestConverter = exports.DeclarativeAgentManifestConverter = exports.TeamsManifestConverter = exports.TeamsManifestVDevPreview = exports.TeamsManifestV1D9 = exports.TeamsManifestV1D8 = exports.TeamsManifestV1D7 = exports.TeamsManifestV1D6 = exports.TeamsManifestV1D5 = exports.TeamsManifestV1D4 = exports.TeamsManifestV1D3 = exports.TeamsManifestV1D21 = exports.TeamsManifestV1D20 = exports.TeamsManifestV1D2 = exports.TeamsManifestV1D19 = exports.TeamsManifestV1D17 = exports.TeamsManifestV1D16 = exports.TeamsManifestV1D15 = exports.TeamsManifestV1D14 = exports.TeamsManifestV1D13 = exports.TeamsManifestV1D12 = exports.TeamsManifestV1D11 = exports.TeamsManifestV1D10 = exports.TeamsManifestV1D1 = exports.TeamsManifestV1D0 = exports.DeclarativeAgentManifestV1D6 = exports.DeclarativeAgentManifestV1D5 = exports.DeclarativeAgentManifestV1D4 = exports.DeclarativeAgentManifestV1D3 = exports.DeclarativeAgentManifestV1D2 = exports.DeclarativeAgentManifestV1D0 = exports.APIPluginManifestV2D3 = exports.APIPluginManifestV2D2 = exports.APIPluginManifestV2D1 = void 0;
const ajv_draft_04_1 = __importDefault(require("ajv-draft-04"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const _2020_1 = __importDefault(require("ajv/dist/2020"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const path_1 = __importDefault(require("path"));
const DeclarativeAgentManifestV1D0 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D0"));
exports.DeclarativeAgentManifestV1D0 = DeclarativeAgentManifestV1D0;
const DeclarativeAgentManifestV1D2 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D2"));
exports.DeclarativeAgentManifestV1D2 = DeclarativeAgentManifestV1D2;
const DeclarativeAgentManifestV1D3 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D3"));
exports.DeclarativeAgentManifestV1D3 = DeclarativeAgentManifestV1D3;
const DeclarativeAgentManifestV1D4 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D4"));
exports.DeclarativeAgentManifestV1D4 = DeclarativeAgentManifestV1D4;
const DeclarativeAgentManifestV1D5 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D5"));
exports.DeclarativeAgentManifestV1D5 = DeclarativeAgentManifestV1D5;
const DeclarativeAgentManifestV1D6 = __importStar(require("./copilot/declarative-agent/DeclarativeAgentManifestV1D6"));
exports.DeclarativeAgentManifestV1D6 = DeclarativeAgentManifestV1D6;
const APIPluginManifestV2D1 = __importStar(require("./copilot/plugin/ApiPluginManifestV2D1"));
exports.APIPluginManifestV2D1 = APIPluginManifestV2D1;
const APIPluginManifestV2D2 = __importStar(require("./copilot/plugin/ApiPluginManifestV2D2"));
exports.APIPluginManifestV2D2 = APIPluginManifestV2D2;
const APIPluginManifestV2D3 = __importStar(require("./copilot/plugin/ApiPluginManifestV2D3"));
exports.APIPluginManifestV2D3 = APIPluginManifestV2D3;
const TeamsManifestV1D0 = __importStar(require("./teams/TeamsManifestV1D0"));
exports.TeamsManifestV1D0 = TeamsManifestV1D0;
const TeamsManifestV1D1 = __importStar(require("./teams/TeamsManifestV1D1"));
exports.TeamsManifestV1D1 = TeamsManifestV1D1;
const TeamsManifestV1D10 = __importStar(require("./teams/TeamsManifestV1D10"));
exports.TeamsManifestV1D10 = TeamsManifestV1D10;
const TeamsManifestV1D11 = __importStar(require("./teams/TeamsManifestV1D11"));
exports.TeamsManifestV1D11 = TeamsManifestV1D11;
const TeamsManifestV1D12 = __importStar(require("./teams/TeamsManifestV1D12"));
exports.TeamsManifestV1D12 = TeamsManifestV1D12;
const TeamsManifestV1D13 = __importStar(require("./teams/TeamsManifestV1D13"));
exports.TeamsManifestV1D13 = TeamsManifestV1D13;
const TeamsManifestV1D14 = __importStar(require("./teams/TeamsManifestV1D14"));
exports.TeamsManifestV1D14 = TeamsManifestV1D14;
const TeamsManifestV1D15 = __importStar(require("./teams/TeamsManifestV1D15"));
exports.TeamsManifestV1D15 = TeamsManifestV1D15;
const TeamsManifestV1D16 = __importStar(require("./teams/TeamsManifestV1D16"));
exports.TeamsManifestV1D16 = TeamsManifestV1D16;
const TeamsManifestV1D17 = __importStar(require("./teams/TeamsManifestV1D17"));
exports.TeamsManifestV1D17 = TeamsManifestV1D17;
const TeamsManifestV1D19 = __importStar(require("./teams/TeamsManifestV1D19"));
exports.TeamsManifestV1D19 = TeamsManifestV1D19;
const TeamsManifestV1D2 = __importStar(require("./teams/TeamsManifestV1D2"));
exports.TeamsManifestV1D2 = TeamsManifestV1D2;
const TeamsManifestV1D20 = __importStar(require("./teams/TeamsManifestV1D20"));
exports.TeamsManifestV1D20 = TeamsManifestV1D20;
const TeamsManifestV1D21 = __importStar(require("./teams/TeamsManifestV1D21"));
exports.TeamsManifestV1D21 = TeamsManifestV1D21;
const TeamsManifestV1D22 = __importStar(require("./teams/TeamsManifestV1D22"));
const TeamsManifestV1D3 = __importStar(require("./teams/TeamsManifestV1D3"));
exports.TeamsManifestV1D3 = TeamsManifestV1D3;
const TeamsManifestV1D4 = __importStar(require("./teams/TeamsManifestV1D4"));
exports.TeamsManifestV1D4 = TeamsManifestV1D4;
const TeamsManifestV1D5 = __importStar(require("./teams/TeamsManifestV1D5"));
exports.TeamsManifestV1D5 = TeamsManifestV1D5;
const TeamsManifestV1D6 = __importStar(require("./teams/TeamsManifestV1D6"));
exports.TeamsManifestV1D6 = TeamsManifestV1D6;
const TeamsManifestV1D7 = __importStar(require("./teams/TeamsManifestV1D7"));
exports.TeamsManifestV1D7 = TeamsManifestV1D7;
const TeamsManifestV1D8 = __importStar(require("./teams/TeamsManifestV1D8"));
exports.TeamsManifestV1D8 = TeamsManifestV1D8;
const TeamsManifestV1D9 = __importStar(require("./teams/TeamsManifestV1D9"));
exports.TeamsManifestV1D9 = TeamsManifestV1D9;
const TeamsManifestVDevPreview = __importStar(require("./teams/TeamsManifestVDevPreview"));
exports.TeamsManifestVDevPreview = TeamsManifestVDevPreview;
const TeamsManifestConverterMap = {
    "1.1": [
        TeamsManifestV1D1.Convert.toTeamsManifestV1D1,
        TeamsManifestV1D1.Convert.teamsManifestV1D1ToJson,
    ],
    "1.2": [
        TeamsManifestV1D2.Convert.toTeamsManifestV1D2,
        TeamsManifestV1D2.Convert.teamsManifestV1D2ToJson,
    ],
    "1.3": [
        TeamsManifestV1D3.Convert.toTeamsManifestV1D3,
        TeamsManifestV1D3.Convert.teamsManifestV1D3ToJson,
    ],
    "1.4": [
        TeamsManifestV1D4.Convert.toTeamsManifestV1D4,
        TeamsManifestV1D4.Convert.teamsManifestV1D4ToJson,
    ],
    "1.5": [
        TeamsManifestV1D5.Convert.toTeamsManifestV1D5,
        TeamsManifestV1D5.Convert.teamsManifestV1D5ToJson,
    ],
    "1.6": [
        TeamsManifestV1D6.Convert.toTeamsManifestV1D6,
        TeamsManifestV1D6.Convert.teamsManifestV1D6ToJson,
    ],
    "1.7": [
        TeamsManifestV1D7.Convert.toTeamsManifestV1D7,
        TeamsManifestV1D7.Convert.teamsManifestV1D7ToJson,
    ],
    "1.8": [
        TeamsManifestV1D8.Convert.toTeamsManifestV1D8,
        TeamsManifestV1D8.Convert.teamsManifestV1D8ToJson,
    ],
    "1.9": [
        TeamsManifestV1D9.Convert.toTeamsManifestV1D9,
        TeamsManifestV1D9.Convert.teamsManifestV1D9ToJson,
    ],
    "1.10": [
        TeamsManifestV1D10.Convert.toTeamsManifestV1D10,
        TeamsManifestV1D10.Convert.teamsManifestV1D10ToJson,
    ],
    "1.11": [
        TeamsManifestV1D11.Convert.toTeamsManifestV1D11,
        TeamsManifestV1D11.Convert.teamsManifestV1D11ToJson,
    ],
    "1.12": [
        TeamsManifestV1D12.Convert.toTeamsManifestV1D12,
        TeamsManifestV1D12.Convert.teamsManifestV1D12ToJson,
    ],
    "1.13": [
        TeamsManifestV1D13.Convert.toTeamsManifestV1D13,
        TeamsManifestV1D13.Convert.teamsManifestV1D13ToJson,
    ],
    "1.14": [
        TeamsManifestV1D14.Convert.toTeamsManifestV1D14,
        TeamsManifestV1D14.Convert.teamsManifestV1D14ToJson,
    ],
    "1.15": [
        TeamsManifestV1D15.Convert.toTeamsManifestV1D15,
        TeamsManifestV1D15.Convert.teamsManifestV1D15ToJson,
    ],
    "1.16": [
        TeamsManifestV1D16.Convert.toTeamsManifestV1D16,
        TeamsManifestV1D16.Convert.teamsManifestV1D16ToJson,
    ],
    "1.17": [
        TeamsManifestV1D17.Convert.toTeamsManifestV1D17,
        TeamsManifestV1D17.Convert.teamsManifestV1D17ToJson,
    ],
    "1.19": [
        TeamsManifestV1D19.Convert.toTeamsManifestV1D19,
        TeamsManifestV1D19.Convert.teamsManifestV1D19ToJson,
    ],
    "1.20": [
        TeamsManifestV1D20.Convert.toTeamsManifestV1D20,
        TeamsManifestV1D20.Convert.teamsManifestV1D20ToJson,
    ],
    "1.21": [
        TeamsManifestV1D21.Convert.toTeamsManifestV1D21,
        TeamsManifestV1D21.Convert.teamsManifestV1D21ToJson,
    ],
    "1.22": [
        TeamsManifestV1D22.Convert.toTeamsManifestV1D22,
        TeamsManifestV1D22.Convert.teamsManifestV1D22ToJson,
    ],
    devPreview: [
        TeamsManifestVDevPreview.Convert.toTeamsManifestVDevPreview,
        TeamsManifestVDevPreview.Convert.teamsManifestVDevPreviewToJson,
    ],
};
const daConverterMap = {
    "v1.0": [
        DeclarativeAgentManifestV1D0.Convert.toDeclarativeAgentManifestV1D0,
        DeclarativeAgentManifestV1D0.Convert.declarativeAgentManifestV1D0ToJson,
    ],
    "v1.2": [
        DeclarativeAgentManifestV1D2.Convert.toDeclarativeAgentManifestV1D2,
        DeclarativeAgentManifestV1D2.Convert.declarativeAgentManifestV1D2ToJson,
    ],
    "v1.3": [
        DeclarativeAgentManifestV1D3.Convert.toDeclarativeAgentManifestV1D3,
        DeclarativeAgentManifestV1D3.Convert.declarativeAgentManifestV1D3ToJson,
    ],
    "v1.4": [
        DeclarativeAgentManifestV1D4.Convert.toDeclarativeAgentManifestV1D4,
        DeclarativeAgentManifestV1D4.Convert.declarativeAgentManifestV1D4ToJson,
    ],
};
const ApiPluginConverterMap = {
    "v2.1": [
        APIPluginManifestV2D1.Convert.toAPIPluginManifestV2D1,
        APIPluginManifestV2D1.Convert.aPIPluginManifestV2D1ToJson,
    ],
    "v2.2": [
        APIPluginManifestV2D2.Convert.toAPIPluginManifestV2D2,
        APIPluginManifestV2D2.Convert.aPIPluginManifestV2D2ToJson,
    ],
    "v2.3": [
        APIPluginManifestV2D3.Convert.toAPIPluginManifestV2D3,
        APIPluginManifestV2D3.Convert.aPIPluginManifestV2D3ToJson,
    ],
};
class TeamsManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const manifestVersion = parsed.manifestVersion;
        const converters = TeamsManifestConverterMap[manifestVersion];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const manifestVersion = manifest.manifestVersion;
        const converters = TeamsManifestConverterMap[manifestVersion];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.TeamsManifestConverter = TeamsManifestConverter;
class DeclarativeAgentManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const version = parsed.version;
        const converters = daConverterMap[version];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const version = manifest.version;
        const converters = daConverterMap[version];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.DeclarativeAgentManifestConverter = DeclarativeAgentManifestConverter;
class ApiPluginManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const schema_version = parsed.schema_version;
        const converters = ApiPluginConverterMap[schema_version];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const schema_version = manifest.schema_version;
        const converters = ApiPluginConverterMap[schema_version];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.ApiPluginManifestConverter = ApiPluginManifestConverter;
class AppManifestUtils {
    /**
     * Fetch the schema from the manifest object, load from local if the schema is in the package
     * @param manifest
     * @returns manifest schema object
     */
    static async fetchSchema(schemaUrl) {
        if (schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/teams") ||
            schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/copilot/declarative-agent") ||
            schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/copilot/plugin")) {
            const suffix = schemaUrl.substring("https://developer.microsoft.com/".length);
            const schemaFile = path_1.default.join(__dirname, "..", suffix);
            if (await fs_extra_1.default.pathExists(schemaFile)) {
                const json = await fs_extra_1.default.readJson(schemaFile);
                return json;
            }
        }
        let result;
        try {
            const res = await (0, node_fetch_1.default)(schemaUrl);
            result = (await res.json());
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error(`Failed to get manifest at url ${schemaUrl} due to: ${e.message}`);
            }
            else {
                throw new Error(`Failed to get manifest at url ${schemaUrl} due to: unknown error`);
            }
        }
        return result;
    }
    static async validateAgainstSchema(manifest, schema) {
        var _a;
        if (!schema) {
            const schemaUrl = manifest.$schema;
            if (!schemaUrl) {
                throw new Error("Manifest does not have a $schema property");
            }
            schema = await this.fetchSchema(schemaUrl);
        }
        let validate;
        if ((_a = schema.$schema) === null || _a === void 0 ? void 0 : _a.includes("2020-12")) {
            const ajv = new _2020_1.default({
                //formats: { uri: true, email: true },
                allErrors: true,
                strictTypes: false,
            });
            (0, ajv_formats_1.default)(ajv, ["uri", "email", "regex"]);
            validate = ajv.compile(schema);
        }
        else {
            const ajv = new ajv_draft_04_1.default({
                allErrors: true,
                strictTypes: false,
            });
            (0, ajv_formats_1.default)(ajv, ["uri", "email", "regex"]);
            validate = ajv.compile(schema);
        }
        const valid = validate(manifest);
        if (!valid && validate.errors) {
            return validate.errors.map((error) => `${error.instancePath} ${error.message || ""}. Details: ${error.params ? JSON.stringify(error.params) : ""}`);
        }
        else {
            return [];
        }
    }
    /**
     * Read Teams manifest from file with basic type check
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readTeamsManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = TeamsManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateTeamsManifest(filePath) {
        const manifest = await this.readTeamsManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Read declarative agent manifest from file with basic type check
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readDeclarativeAgentManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = DeclarativeAgentManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateDeclarativeAgentManifest(filePath) {
        const manifest = await this.readDeclarativeAgentManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Read API plugin manifest from file with basic type check
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readApiPluginManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = ApiPluginManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read API plugin manifest from file with schema validation
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateApiPluginManifest(filePath) {
        const manifest = await this.readApiPluginManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Writes the Teams manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeTeamsManifest(filePath, manifest) {
        const jsonString = TeamsManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeDeclarativeAgentManifest(filePath, manifest) {
        const jsonString = DeclarativeAgentManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeApiPluginManifest(filePath, manifest) {
        const jsonString = ApiPluginManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
}
exports.AppManifestUtils = AppManifestUtils;
//# sourceMappingURL=index.js.map