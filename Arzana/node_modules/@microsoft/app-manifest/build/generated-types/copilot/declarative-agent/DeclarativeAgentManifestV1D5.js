"use strict";
// To parse this data:
//
//   import { Convert, DeclarativeAgentManifestV1D5 } from "./file";
//
//   const declarativeAgentManifestV1D5 = Convert.toDeclarativeAgentManifestV1D5(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = void 0;
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
class Convert {
    static toDeclarativeAgentManifestV1D5(json) {
        return cast(JSON.parse(json), r("DeclarativeAgentManifestV1D5"));
    }
    static declarativeAgentManifestV1D5ToJson(value) {
        return JSON.stringify(uncast(value, r("DeclarativeAgentManifestV1D5")), null, 4);
    }
}
exports.Convert = Convert;
function invalidValue(typ, val, key, parent = '') {
    const prettyTyp = prettyTypeName(typ);
    const parentText = parent ? ` on ${parent}` : '';
    const keyText = key ? ` for key "${key}"` : '';
    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);
}
function prettyTypeName(typ) {
    if (Array.isArray(typ)) {
        if (typ.length === 2 && typ[0] === undefined) {
            return `an optional ${prettyTypeName(typ[1])}`;
        }
        else {
            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(", ")}]`;
        }
    }
    else if (typeof typ === "object" && typ.literal !== undefined) {
        return typ.literal;
    }
    else {
        return typeof typ;
    }
}
function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}
function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}
function transform(val, typ, getProps, key = '', parent = '') {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            }
            catch (_) { }
        }
        return invalidValue(typs, val, key, parent);
    }
    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1)
            return val;
        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);
    }
    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val))
            return invalidValue(l("array"), val, key, parent);
        return val.map(el => transform(el, typ, getProps));
    }
    function transformDate(val) {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue(l("Date"), val, key, parent);
        }
        return d;
    }
    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue(l(ref || "object"), val, key, parent);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, key, ref);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key, ref);
            }
        });
        return result;
    }
    if (typ === "any")
        return val;
    if (typ === null) {
        if (val === null)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    if (typ === false)
        return invalidValue(typ, val, key, parent);
    let ref = undefined;
    while (typeof typ === "object" && typ.ref !== undefined) {
        ref = typ.ref;
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ))
        return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val, key, parent);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number")
        return transformDate(val);
    return transformPrimitive(typ, val);
}
function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}
function l(typ) {
    return { literal: typ };
}
function a(typ) {
    return { arrayItems: typ };
}
function u(...typs) {
    return { unionMembers: typs };
}
function o(props, additional) {
    return { props, additional };
}
function m(additional) {
    return { props: [], additional };
}
function r(name) {
    return { ref: name };
}
const typeMap = {
    "DeclarativeAgentManifestV1D5": o([
        { json: "version", js: "version", typ: r("Version") },
        { json: "id", js: "id", typ: u(undefined, "") },
        { json: "name", js: "name", typ: "" },
        { json: "description", js: "description", typ: "" },
        { json: "disclaimer", js: "disclaimer", typ: u(undefined, r("Disclaimer")) },
        { json: "instructions", js: "instructions", typ: u(undefined, "") },
        { json: "behavior_overrides", js: "behavior_overrides", typ: u(undefined, r("BehaviorOverrides")) },
        { json: "capabilities", js: "capabilities", typ: u(undefined, a(r("CapabilityElement"))) },
        { json: "conversation_starters", js: "conversation_starters", typ: u(undefined, a(r("ConversationStarterElement"))) },
        { json: "actions", js: "actions", typ: u(undefined, a(r("ActionElement"))) },
    ], "any"),
    "ActionElement": o([
        { json: "id", js: "id", typ: "" },
        { json: "file", js: "file", typ: "" },
    ], "any"),
    "BehaviorOverrides": o([
        { json: "special_instructions", js: "special_instructions", typ: u(undefined, r("SpecialInstructions")) },
        { json: "suggestions", js: "suggestions", typ: u(undefined, r("Suggestions")) },
    ], "any"),
    "SpecialInstructions": o([
        { json: "discourage_model_knowledge", js: "discourage_model_knowledge", typ: u(undefined, true) },
    ], "any"),
    "Suggestions": o([
        { json: "disabled", js: "disabled", typ: u(undefined, true) },
    ], "any"),
    "CapabilityElement": o([
        { json: "name", js: "name", typ: r("Name") },
        { json: "sites", js: "sites", typ: u(undefined, a(r("SiteElement"))) },
        { json: "items_by_sharepoint_ids", js: "items_by_sharepoint_ids", typ: u(undefined, a(r("ItemsBySharepointIDElement"))) },
        { json: "items_by_url", js: "items_by_url", typ: u(undefined, a(r("ItemsByURLElement"))) },
        { json: "connections", js: "connections", typ: u(undefined, a(r("ConnectionElement"))) },
        { json: "urls", js: "urls", typ: u(undefined, a(r("URLElement"))) },
        { json: "knowledge_sources", js: "knowledge_sources", typ: u(undefined, a(r("KnowledgeSourceElement"))) },
        { json: "folders", js: "folders", typ: u(undefined, a(r("FolderElement"))) },
        { json: "shared_mailbox", js: "shared_mailbox", typ: u(undefined, "") },
        { json: "models", js: "models", typ: u(undefined, a(r("ModelElement"))) },
    ], "any"),
    "ConnectionElement": o([
        { json: "connection_id", js: "connection_id", typ: "" },
        { json: "additional_search_terms", js: "additional_search_terms", typ: u(undefined, "") },
        { json: "items_by_external_url", js: "items_by_external_url", typ: u(undefined, a(r("ItemsByExternalURLElement"))) },
        { json: "items_by_external_id", js: "items_by_external_id", typ: u(undefined, a(r("ItemsByExternalIDElement"))) },
        { json: "items_by_path", js: "items_by_path", typ: u(undefined, a(r("ItemsByPathElement"))) },
        { json: "items_by_container_name", js: "items_by_container_name", typ: u(undefined, a(r("ItemsByContainerNameElement"))) },
        { json: "items_by_container_url", js: "items_by_container_url", typ: u(undefined, a(r("ItemsByContainerURLElement"))) },
    ], "any"),
    "ItemsByContainerNameElement": o([
        { json: "container_name", js: "container_name", typ: "" },
    ], "any"),
    "ItemsByContainerURLElement": o([
        { json: "container_url", js: "container_url", typ: "" },
    ], "any"),
    "ItemsByExternalIDElement": o([
        { json: "item_id", js: "item_id", typ: "" },
    ], "any"),
    "ItemsByExternalURLElement": o([
        { json: "url", js: "url", typ: "" },
    ], "any"),
    "ItemsByPathElement": o([
        { json: "path", js: "path", typ: "" },
    ], "any"),
    "FolderElement": o([
        { json: "folder_id", js: "folder_id", typ: "" },
    ], "any"),
    "ItemsBySharepointIDElement": o([
        { json: "site_id", js: "site_id", typ: u(undefined, "") },
        { json: "web_id", js: "web_id", typ: u(undefined, "") },
        { json: "list_id", js: "list_id", typ: u(undefined, "") },
        { json: "unique_id", js: "unique_id", typ: u(undefined, "") },
        { json: "part_id", js: "part_id", typ: u(undefined, "") },
        { json: "part_type", js: "part_type", typ: u(undefined, r("PartType")) },
        { json: "search_associated_sites", js: "search_associated_sites", typ: u(undefined, true) },
    ], false),
    "ItemsByURLElement": o([
        { json: "url", js: "url", typ: u(undefined, "") },
    ], false),
    "KnowledgeSourceElement": o([
        { json: "host_name", js: "host_name", typ: u(undefined, "") },
        { json: "skill", js: "skill", typ: u(undefined, "") },
        { json: "tables", js: "tables", typ: u(undefined, a(r("TableElement"))) },
    ], "any"),
    "TableElement": o([
        { json: "table_name", js: "table_name", typ: u(undefined, "") },
    ], "any"),
    "ModelElement": o([
        { json: "id", js: "id", typ: "" },
    ], "any"),
    "SiteElement": o([
        { json: "url", js: "url", typ: "" },
    ], "any"),
    "URLElement": o([
        { json: "url", js: "url", typ: "" },
    ], "any"),
    "ConversationStarterElement": o([
        { json: "text", js: "text", typ: "" },
        { json: "title", js: "title", typ: u(undefined, "") },
    ], "any"),
    "Disclaimer": o([
        { json: "text", js: "text", typ: "" },
    ], "any"),
    "PartType": [
        "OneNotePart",
    ],
    "Name": [
        "CodeInterpreter",
        "Dataverse",
        "Email",
        "GraphConnectors",
        "GraphicArt",
        "Meetings",
        "OneDriveAndSharePoint",
        "People",
        "ScenarioModels",
        "TeamsMessages",
        "WebSearch",
    ],
    "Version": [
        "v1.5",
    ],
};
//# sourceMappingURL=DeclarativeAgentManifestV1D5.js.map