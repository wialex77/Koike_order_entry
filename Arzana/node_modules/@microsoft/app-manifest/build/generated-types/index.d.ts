import { JSONSchemaType } from "ajv";
import * as DeclarativeAgentManifestV1D0 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D0";
import * as DeclarativeAgentManifestV1D2 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D2";
import * as DeclarativeAgentManifestV1D3 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D3";
import * as DeclarativeAgentManifestV1D4 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D4";
import * as DeclarativeAgentManifestV1D5 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D5";
import * as DeclarativeAgentManifestV1D6 from "./copilot/declarative-agent/DeclarativeAgentManifestV1D6";
import * as APIPluginManifestV2D1 from "./copilot/plugin/ApiPluginManifestV2D1";
import * as APIPluginManifestV2D2 from "./copilot/plugin/ApiPluginManifestV2D2";
import * as APIPluginManifestV2D3 from "./copilot/plugin/ApiPluginManifestV2D3";
import * as TeamsManifestV1D0 from "./teams/TeamsManifestV1D0";
import * as TeamsManifestV1D1 from "./teams/TeamsManifestV1D1";
import * as TeamsManifestV1D10 from "./teams/TeamsManifestV1D10";
import * as TeamsManifestV1D11 from "./teams/TeamsManifestV1D11";
import * as TeamsManifestV1D12 from "./teams/TeamsManifestV1D12";
import * as TeamsManifestV1D13 from "./teams/TeamsManifestV1D13";
import * as TeamsManifestV1D14 from "./teams/TeamsManifestV1D14";
import * as TeamsManifestV1D15 from "./teams/TeamsManifestV1D15";
import * as TeamsManifestV1D16 from "./teams/TeamsManifestV1D16";
import * as TeamsManifestV1D17 from "./teams/TeamsManifestV1D17";
import * as TeamsManifestV1D19 from "./teams/TeamsManifestV1D19";
import * as TeamsManifestV1D2 from "./teams/TeamsManifestV1D2";
import * as TeamsManifestV1D20 from "./teams/TeamsManifestV1D20";
import * as TeamsManifestV1D21 from "./teams/TeamsManifestV1D21";
import * as TeamsManifestV1D22 from "./teams/TeamsManifestV1D22";
import * as TeamsManifestV1D3 from "./teams/TeamsManifestV1D3";
import * as TeamsManifestV1D4 from "./teams/TeamsManifestV1D4";
import * as TeamsManifestV1D5 from "./teams/TeamsManifestV1D5";
import * as TeamsManifestV1D6 from "./teams/TeamsManifestV1D6";
import * as TeamsManifestV1D7 from "./teams/TeamsManifestV1D7";
import * as TeamsManifestV1D8 from "./teams/TeamsManifestV1D8";
import * as TeamsManifestV1D9 from "./teams/TeamsManifestV1D9";
import * as TeamsManifestVDevPreview from "./teams/TeamsManifestVDevPreview";
export { APIPluginManifestV2D1, APIPluginManifestV2D2, APIPluginManifestV2D3, DeclarativeAgentManifestV1D0, DeclarativeAgentManifestV1D2, DeclarativeAgentManifestV1D3, DeclarativeAgentManifestV1D4, DeclarativeAgentManifestV1D5, DeclarativeAgentManifestV1D6, TeamsManifestV1D0, TeamsManifestV1D1, TeamsManifestV1D10, TeamsManifestV1D11, TeamsManifestV1D12, TeamsManifestV1D13, TeamsManifestV1D14, TeamsManifestV1D15, TeamsManifestV1D16, TeamsManifestV1D17, TeamsManifestV1D19, TeamsManifestV1D2, TeamsManifestV1D20, TeamsManifestV1D21, TeamsManifestV1D3, TeamsManifestV1D4, TeamsManifestV1D5, TeamsManifestV1D6, TeamsManifestV1D7, TeamsManifestV1D8, TeamsManifestV1D9, TeamsManifestVDevPreview, };
export { TeamsManifestVDevPreview as DevPreviewSchema } from "./teams/TeamsManifestVDevPreview";
export type TeamsManifest = (TeamsManifestV1D0.TeamsManifestV1D0 & {
    manifestVersion: "1.0";
    $schema?: string;
}) | (TeamsManifestV1D1.TeamsManifestV1D1 & {
    manifestVersion: "1.1";
}) | (TeamsManifestV1D2.TeamsManifestV1D2 & {
    manifestVersion: "1.2";
}) | (TeamsManifestV1D3.TeamsManifestV1D3 & {
    manifestVersion: "1.3";
}) | (TeamsManifestV1D4.TeamsManifestV1D4 & {
    manifestVersion: "1.4";
}) | TeamsManifestV1D5.TeamsManifestV1D5 | TeamsManifestV1D6.TeamsManifestV1D6 | TeamsManifestV1D7.TeamsManifestV1D7 | TeamsManifestV1D8.TeamsManifestV1D8 | TeamsManifestV1D9.TeamsManifestV1D9 | TeamsManifestV1D10.TeamsManifestV1D10 | TeamsManifestV1D11.TeamsManifestV1D11 | TeamsManifestV1D12.TeamsManifestV1D12 | TeamsManifestV1D13.TeamsManifestV1D13 | TeamsManifestV1D14.TeamsManifestV1D14 | TeamsManifestV1D15.TeamsManifestV1D15 | TeamsManifestV1D16.TeamsManifestV1D16 | TeamsManifestV1D17.TeamsManifestV1D17 | TeamsManifestV1D19.TeamsManifestV1D19 | TeamsManifestV1D20.TeamsManifestV1D20 | TeamsManifestV1D21.TeamsManifestV1D21 | TeamsManifestV1D22.TeamsManifestV1D22 | TeamsManifestVDevPreview.TeamsManifestVDevPreview;
export type TeamsManifestLatest = TeamsManifestV1D21.TeamsManifestV1D21;
export { SensitivityLabel } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D6";
export type DeclarativeAgentManifest = DeclarativeAgentManifestV1D0.DeclarativeAgentManifestV1D0 | DeclarativeAgentManifestV1D2.DeclarativeAgentManifestV1D2 | DeclarativeAgentManifestV1D3.DeclarativeAgentManifestV1D3 | DeclarativeAgentManifestV1D4.DeclarativeAgentManifestV1D4 | DeclarativeAgentManifestV1D5.DeclarativeAgentManifestV1D5 | DeclarativeAgentManifestV1D6.DeclarativeAgentManifestV1D6;
export type DeclarativeAgentManifestLatest = DeclarativeAgentManifestV1D6.DeclarativeAgentManifestV1D6;
export type APIPluginManifest = APIPluginManifestV2D1.APIPluginManifestV2D1 | APIPluginManifestV2D2.APIPluginManifestV2D2 | APIPluginManifestV2D3.APIPluginManifestV2D3;
export type APIPluginManifestLatest = APIPluginManifestV2D3.APIPluginManifestV2D3;
export type AppManifest = TeamsManifest | DeclarativeAgentManifest | APIPluginManifest;
export declare class TeamsManifestConverter {
    static jsonToManifest(json: string): TeamsManifest;
    static manifestToJson(manifest: TeamsManifest): string;
}
export declare class DeclarativeAgentManifestConverter {
    static jsonToManifest(json: string): DeclarativeAgentManifest;
    static manifestToJson(manifest: DeclarativeAgentManifest): string;
}
export declare class ApiPluginManifestConverter {
    static jsonToManifest(json: string): APIPluginManifest;
    static manifestToJson(manifest: APIPluginManifest): string;
}
export declare class AppManifestUtils {
    /**
     * Fetch the schema from the manifest object, load from local if the schema is in the package
     * @param manifest
     * @returns manifest schema object
     */
    static fetchSchema(schemaUrl: string): Promise<JSONSchemaType<AppManifest>>;
    static validateAgainstSchema(manifest: AppManifest, schema?: JSONSchemaType<AppManifest>): Promise<string[]>;
    /**
     * Read Teams manifest from file with basic type check
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readTeamsManifest(filePath: string): Promise<TeamsManifest>;
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateTeamsManifest(filePath: string): Promise<[TeamsManifest, string[]]>;
    /**
     * Read declarative agent manifest from file with basic type check
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readDeclarativeAgentManifest(filePath: string): Promise<DeclarativeAgentManifest>;
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateDeclarativeAgentManifest(filePath: string): Promise<[DeclarativeAgentManifest, string[]]>;
    /**
     * Read API plugin manifest from file with basic type check
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readApiPluginManifest(filePath: string): Promise<APIPluginManifest>;
    /**
     * Read API plugin manifest from file with schema validation
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateApiPluginManifest(filePath: string): Promise<[APIPluginManifest, string[]]>;
    /**
     * Writes the Teams manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeTeamsManifest(filePath: string, manifest: TeamsManifest): Promise<void>;
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeDeclarativeAgentManifest(filePath: string, manifest: DeclarativeAgentManifest): Promise<void>;
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeApiPluginManifest(filePath: string, manifest: APIPluginManifest): Promise<void>;
}
